1. 변수
• var
- 중복선언 가능
- 재할당 가능
- 함수레벨 스코프

• let
- 중복선언 불가능
- 재할당 가능
- 블록레벨 스코프

• const
- 중복선언 불가능
- 재할당 불가능
- 블록레벨 스코프

2. 함수 선언
- 지정된 매개변수를 갖는 함수를 정의
- function name([param[, param, [..., param]]]){
    [statements]
}
- params : 함수로 전달되는 인수의 이름, 인수의 최대 개수는 엔진마다 다름

3. ES6
• 화살표 함수
- function이란 말을 생략하고 화살표 사용
- 구문을 간결하게 작성 가능
- var name = (매개변수) => {

}
- 표현식이 하나인 경우 {} 없이 바로 사용 가능
- 매개변수가 하나인 경우 () 없이 바로 사용 가능

• spread 연산자
- 특정 객체나 배열의 값을 복제할 때 사용
- var 새로운 객체명 = {...기존객체명};
- var 새로운 배열명 = [...기존배열명];
- 기본값 지정 : const [변수1, 변수2, 변수3=기본값] = [값1, 값2];

• 템플릿 문자열
- 백틱(`) 사용
- 여러 줄 작성 시 사용
- 표현식을 일반 문자열에 적용
- 중첩 사용 가능

• 비구조 할당
- 배열이나 객체의 속성 혹은 값을 해체하여 그 값을 변수에 각각 담아 사용하는 자바스크립트 표현식


4. 동기/비동기
• 콜백함수
- 함수를 등록하기만 하고 어떤 이벤트가 발생하거나 특정 시점에 도달했을 때 시스템에서 호출하는 함수
- 가독성이나 코드 재사용면에서 사용
- 비동기 방식으로 작성된 함수를 동기 처리하기 위해 필요

• Promise
- 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타냄
- 대기 : 이행하지도 거부하지도 않은 초기 상태
- 이행 : 연산이 성공적으로 완료
- 거부 : 연산 실패

• async, await
- promise를 좀 더 편하게 사용 가능
- async : function 앞에 위치. 해당 함수는 항상 promise 반환
- await : async 함수 안에서만 동작. await 함수를 만나면 promise가 처리될 때까지 대기