1. MPA/SPA
• MPA
- Multiple Page Application
- 여러 개의 페이지로 구성
- 새로운 페이지 요청마다 정적 리소스 다운로드
- 매번 전체 페이지 렌더링
- SSR

• SPA
- Single Page Application
- 한 개의 페이지로 구성
- 모든 정적 리소스를 최초 한 번 다운로드
- 새로운 요청시 필요한 데이터만 전달받아 갱신
- CSR

https://hanamon.kr/spa-mpa-ssr-csr-%EC%9E%A5%EB%8B%A8%EC%A0%90-%EB%9C%BB%EC%A0%95%EB%A6%AC/

2. 컴포넌트
• 클래스형 컴포넌트
- state, LifeCycleAPI 사용 가능
- 임의 메서드 정의 가능
- this.state를 통한 초기값 설정 가능
- this.props
class App extends Component {
    render() {
        return <></>
    }
}

• 함수형 컴포넌트
- state, LifeCycleAPI 사용 가능
- 선언이 편리
- 메모리 자원 덜 사용
- 빌드의 결과물이 작음
- useState로 state 핸들링
- parameter로 props 전달받음
const App = (param) => {
    return <></>
}

2. JSX 문법
- Javascript에 XML을 추가한 확장한 문법
- 공식적인 문법은 아님
- 브라우저에서 실행하기 전, 바벨을 사용하여 일반 형태로 변환됨
- 반드시 부모 요소 하나가 감싸는 형태
- 표현식 : {}로 감싸 사용
- 삼항 연산자 사용
- style 카멜표기법 작성
- class -> className

3. Props/State
• props
- 컴포넌트에 전달

• state
- 컴포넌트 안에서 관리

4. Virtual DOM
- 하나의 가상 레이어
- DOM을 추상화한 가상의 객체
- DOM에 변경사항이 바로 반영되지 않지만 한 번에 DOM에 전달되어 렌더가 한 번 일어남

5. Reconciliation(재조정)
- 비교 알고리즘
- 자식에 대한 재귀적 처리

6. Event handling
- 카멜표기법 사용
- JSX를 사용하여 문자열이 아닌 함수로 이벤트 핸들러 전당