1. SPA 장점
• Optimizing performance
- 변경된 부분만 갱신해 전체적인 트래픽 감소와 렌더링 효율 향상
- 빠른 화면 이동 가능
- 앱처럼 자연스러운 UX 제공
- 모듈화, 컴포넌트별 개발 용이

2. SPA 단점
• 앱 규모가 커질수록 JS 크기가 커짐
- 페이지 로딩시 실제로 방문하지 않을 수 있는 페이지 관련 컴포넌트 코드도 불러오기 때문

3. SSR
• Server Side Rendering
- 서버쪽에서 렌더링 준비를 끝마친 상태로 클라이언트에 전달
- 첫 페이지 로딩이 빠름
- 크롤러에 대응하기 용이
- 서버자원 더 많이 사용

• Next.js
- react로 만드는 서버사이드 렌더링 프레임워크
- hot reloading : 개발 중 저장되는 코드 자동 새로고침
- automatic routing : pages 폴더에 있는 파일은 해당 파일 이름으로 라우팅됨
- single file components : styled jsx를 사용해 컴포넌트 내부에 해당 컴포넌트만 스코프를 가지는 CSS 생성 가능
- 글로벌 스타일 정의 가능 : _app.tsx.에 정의
- server landing : 한 페이지의 소스보기를 클릭하면 내부에 소스 존재
- code splitting : dynamic impot를 이용해 손쉽게 코드 스플리팅
- typescript : 웹팩, 바벨 설정 불필요

4. CSR
• Client Side Rendering
- 서버가 요청을 받으면 클라이언트에 html/css를 보내주면 렌더링 시작
- 첫 페이지 외 로딩시간 빠름

https://proglish.tistory.com/216

5. React-Router-dom
• react를 사용할 대 페이지 이동시 필요한 라이브러리


6. Route 연결
• Switch
- Route로 생성된 자식 컴포넌트 중 매칭되는 첫번째 Route를 렌더링

• Link
- a 태그와 비슷하며 to 속성에 설정된 링크로 이동
- 페이지를 새로 불러와 기존 컴포넌트에서 들고 있던 값이 날라감
- 기록이 history에 저장

7. Redirect
• Redirect 컴포넌트는 랜더링 되면 to로 지정된 경로로 이동

8. History API
• back()
- 세션 기록의 바로 뒤 페이지로 이동하는 비동기 메서드

• forward()
- 세션 기록의 바로 앞 페이지로 이동하는 비동기 메서드

• go()
- 특정한 세션 기록으로 이동하는 비동기 메서드
- 1을 넣어 호출하면 바로 앞 페이지
- -1을 넣어 호출하면 바로 뒤 페이지

• pushState()
- 주어진 데이터를 세션 기록 스택에 넣음
- 직렬화 가능한 모든 자바스크립트 객체를 저장하는 것이 가능

• replaceState()
- 최근 세션 기록 스택의 내용을 주어진 데이터로 교체

9. Dynamic routing
• 동적 라우팅
- 라우트 경로에 특정 값을 넣어 해당하는 페이지로 이동할 수 있게 하는 것

10. Nested routes
• 중첩 라우팅
- 라우팅 맵핑을 최상위 컴포넌트 뿐만 아니라 여러 개의 컴포넌트에 걸쳐서 단계별로 정의하는 라우팅 기법

11. 파라미터
• /profiles/min
- 일반적으로 특정 id나 이름을 가지고 조회할 때 사용

12. 쿼리
• /about?detail=true
- 어떤 키워를 검색하거나 요청할 때 필요한 옵션 전달시 사용