1. REST API
• 두 컴퓨터 시스템이 인터넷을 통해 정보를 안전하게 교환하기 위해 사용하는 인터페이스

• REST
- API 작동 방식에 대한 조건을 부과하는 소프트웨어 아키텍처
- 인터넷과 같은 복잡한 네트워크에서 통신을 관리하기 위한 지침으로 만들어짐
- REST 기반 아키텍처를 사용하여 대규모의 고성능 통신을 안정적으로 지원 가능

• 원칙
- 균일한 인터페이스
- 무상태
- 계층화 시스템
- 캐시 가능성
- 온디맨드 코드

• 장점
- 확장성
- 유연성
- 독립성

• 요청
- 고유 리소스 식별자
- 메서드
- HTTP 헤더

2. URI
• 특정 리소스를 식별하는 통합 자원 식별자
- 웹 기술에서 사용하는 논리적 또는 물리적 리소를 식별하는 고유한 문자열 시퀀스

• scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]
- scheme: 사용할 프로토콜. 웹에서는 http 또는 https(URI에서는 생략 가능)
- user, password: (서버에 있는)데이터에 접근하기 위한 사용자의 이름과 비밀번호
- host, port: 접근할 대상(서버)의 호스트명과 포트 번호
- path: 접근할 대상의 경로에 대한 상세 정보
- query: 접근할 대상에 전달하는 추가적인 정보(파라미터)
- fragment: 메인 리소스 내에 존재하는 서브 리소스에 접근할 때 이를 식별하기 위한 정보

• uri rule
- 후행 슬래시는 URI에 포함되지 않아야 한다.
- 계층 관계를 나타낼 때 슬래시 구분자를 사용해야 한다.
- URI의 가독성을 높이기 위해서 하이픈(-) 문자를 사용한다.
- 언더바(_)는 사용하지 않는다.
- URI를 작성하는 데에는 소문자가 적합하다.
- 파일 확장자는 URI에 포함하지 않는다.
- 보통 URI는 영어로 작성되는데, 단순유지 규칙이 적용됨. 

3. URL
• 흔히 웹 주소라고 명칭
- 식별자+위치
- 컴퓨터 네트워크 상에서 리소스가 어딨는지 알려주기 위한 규약

4. Domain
• 사람이 쉽게 기억하고 입력할 수 있도록 문자로 만든 인터넷 주소

• 체계
- . 또는 루트라고 불리는 도메인 이하에 역트리 구조로 구성됨
- 루트 도메인 바로 아래 단계를 1단계 도메인 또는 최상위 도메인(TLD)이라고 부름
- 그 다음 단계는 2단계 도메인(SLD)

5. sub Domain
• 보조 도메인
- URL로 전송하거나 계정 내의 IP 주소나 디렉토리로 포워딩되는 도메인 이름의 확장자
ex) blog.naver.com, mail.naver.com

6. Cookie
• 개념
- 유저들의 효율적이고 안전한 웹 사용을 보장하기 위해 사용
- 웹사이트 접속시 접속자의 개인장치에 다운로드 되고 브라우저에 저장되는 작은 텍스트 파일
- 웹사이트는 쿠키를 통해 접속자의 장치를 인식하고, 접속자의 설정과 과거 이용내역에 대한 일부 데이터를 저장

• 이용
- 세션 관리, 개인화, 트래킹 등

• 형태
- key, value 형태의 string문

• 종류
- 기술적 쿠키: 검색하는 주체가 사람인지 앱인지 구분
- 분석 쿠키: 어떤 종류를 검색하는지, 많이 검색하는지, 시간, 언어 대상 등의 정보 수집
- 광고 쿠키: 검색 내용, 국가, 언어에 따라 광고 게재

• 사용 방법
- 클라이언트가 서버에 요청하면 서버는 응답할 때 쿠키에 저장하고자 하는 정보를 헤더의 set-cookie로 전달 
Set-Cookie = <cookie-name>=<cookie-value>
- 클라이언트는 서버로 전송하는 요청에 현재 브라우저에 저장된 쿠키를 헤더의 Cookie로 전달
Cookie : <cookie-name>=<cookie-value>

7. Session
• 개념
- 세션은 인증 정보를 쿠키에 저장하지 않고 사용자의 식별자인 session id로 저장
- 보안상 안전

• 동작 원리
- 클라이언트가 서버에 request 요청
- 서버가 클라이언트로 session id 쿠키 값 체크 후 없을 경우 새로 생성해서 응답
- 클라이언트는 전달받은 session id 값을 매 요청마다 Header 쿠키에 담아서 전달
- 서버는 session id로 사용자 식별
- 클라이언트가 로그인 요청 시 서버에서는 세션을 로그인한 사용자 정보로 갱신하고, 새로운 session id를 발급하여 응답
- 클라이언트가 이후에 사용자의 session id 쿠키를 요청과 함께 전달하고, 서버에서도 해당 로그인 사용자로 식별
- 클라이언트 종료 시 session id 제거, 서버에서도 session 제거

• 특징
- id는 브라우저 단위로 저장되고, 브라우저 종료 시 제거
- 로그아웃 시 새로운 대상으로 인식하여 새로운 session 생성
- 여러 정보를 session에 같이 담으면 해당 정보를 DB에서 매번 조회할 필요가 없어 효율성 증가

• 보안
- HTTPS 통신을 위해 session 옵션으로 secure=true 설정
- Httponly=true 옵션으로 js를 통해서 session 쿠키를 사용할 수 없도록 강제 설정

8. OAuth
• 모든 시스템에 대해 매우 안전한 로그인 액세스를 보장하기 위해 암호화 토큰을 결합
- 서버는 먼저 암호를 요청한 다음 권한 부여 프로세스를 완료하기 위해 추가 토큰을 요청
- 특정 범위와 수명으로 언제든지 토큰 확인 가능

9. JWT
• 웹에서 사용되는 JSON 형식의 토큰에 대한 표준 규격
- 주로 사용자의 인증 또는 인가 정보를 서버와 클라이언트 간에 안전하게 주고 받기 위해서 사용
- 보통 웹에서 Authorization HTTP 헤더를 Bearer <토큰>으로 설정하여 클라이언트에서 서버로 전송
- 서버에서는 토큰에 포함되어 있는 서명 정보를 통해서 위변조 여부를 빠르게 검증할 수 있음

• 구조
- <헤더>.<페이로드>.<서명>
- 헤더: 토큰의 유형과 서명 알고리즘에 명시
- 페이로드: 사용자의 인증/인가 정보
- 서명: 헤더와 페이로드가 비밀키로 서명되어 저장
- 키를 3글자로 줄이는 관행이 있음

• 장점
- 확장성
- 사용자 인증을 위해 추가로 투자해야하는 인프라 비용 절감
- 쿠키를 사용하지 않아 CORS 문제에서 자유로워짐

• 한계
- 대규모 서비스에서 사용하기 어려움
- 현재 로그인된 사용자의 모든 장비들을 나열하거나, 특정 장비에서 로그아웃을 허용하는 기능을 구현하려면 서버 단에 사용자 세션을 저장하지 않고는 어려움

10. Local Storage
• 의미
- 데이터를 브라우저에 반영구적으로 저장
- 브라우저를 종료 후 재시작해도 데이터가 남아 있음
- 다른 창과 브라우저를 통해서도 접근 가능

• 사용
- 데이터를 객체 또는 배열로 사용하고 싶다면 JSON 방식으로 사용
- 불필요한 데이터는 직접 삭제해야 함