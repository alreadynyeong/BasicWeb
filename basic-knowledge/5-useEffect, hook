1. 라이프사이클
• Mounting
- DOM이 생성되고 웹 브라우저상에 나타나는 것

• componentDidMount
- 컴포넌트가 웹 브라우저상에 나타난 후 호출하는 메서드
- 비동기 작업 처리

• Updating
- props가 바뀔 떼
- state가 바뀔 때
- 부모 컴포넌트가 리렌더링될 때
- this.forUpdate로 강제로 렌더링을 트리거할 때

• componentDidUpadte
- 업데이트가 끝난 직후이므로 DOM 관련 처리를 해도 무방

• shouldComponentUpdate
- 업데이트가 시작하기 전에 호출
- props의 변화에 따라 state 값에도 변화를 주고싶을 때 사용

• Unmounting
- 컴포넌트를 DOM에서 제거하는 것

• componentWillInMount
- 컴포넌트가 웹 브라우저상에서 사라지기 전에 호출하는 메서드

2. useEffect
- 컴포넌트의 부수효과를 처리할 때 사용
- API 호출, 이벤트 처리 등
- 부수효과 함수와 의존성 배열을 인자로 받음
- 의존성 배열에 값을 입력하면, 배열의 값이 변경되는 경우에만 실행
- 빈배열인 경우 첫 렌더링에만 실행
- 배열을 주지 않는 경우 컴포넌트 렌더링할 때마다 실행

3. useContext
- Consumer 컴포넌트를 사용하지 않고 context API로 부터 전달되는 데이터를 쉽게 사용 가능
- 해당 컴포넌트는 context에 의존적인 컴포넌트가 되어 context 데이터가 변경되면 컴포넌트가 리렌더링

4. useRef
- 직접 DOM 요소에 접근해야 할 때가 있는데, useRef 훅을 사용하여 DOM 요소에 직접 접근이 가능
- useRef 훅이 반환하는 ref 객체를 이용해서 자식 요소에 접근 가능
- 접근하고자하는 자식 요소의 ref 속성값에 ref 객체 입력
- 해당 DOM 요소 또는 컴포넌트가 생성되면 ref 객체로 접근 가능
- ref 객체를 내려받아서 사용도 가능
- 컴포넌트가 생성된 이후라도 ref 객체의 current 속성이 없을 수 있음

5. useMemo
- 계산량이 많은 함수의 반환값을 재활용하는 용도로 사용
- 첫번재 인자로 함수를 받고, 이 함수가 반환하는 값을 기억
- 두번째 인자로 의존성 배열을 받고 변경되지 않으면 이전에 반환된 값을 재사용

6. useCallback
- react의 렌더링 성능을 위해 제공
- 컴포넌트가 렌더링될 때마다 새로운 함수를 생성해서 자식 컴포넌트의 속성값으로 입력하는 경우가 많음
- 속성값이 매번 변경되기 때문에 불필요한 렌더링 발생함

7. useStateful

8. useState
- 컴포넌트에 상태값을 추가할 때 사용
- useState 훅이 반환하는 배열의 첫번쩨 요소는 상태값이며, 두번째 요소는 상태값 변경 함수
- 상태값 변경 함수가 호출되면 컴포넌트는 re-rendering되며, re-rendering 과정에서 자식 컴포넌트도 같이 렌더링됨
- 참조타입을 상태값으로 사용하는 경우, 얕은비교/깊은 비교에 주의해야함
- 상태값 변경을 가능하다면 batch로 처리

9. useDebugValue
- react 개발자 도구에서 사용하는 훅 레이블을 표시하는데 사용