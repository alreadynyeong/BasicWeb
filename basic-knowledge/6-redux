1. Redux
•  자바스크립트 상태관리 라이브러리
- Redux의 본질은 node.js 모듈

• store
- 상태가 관리되는 오직 하나의 공간
- 컴포넌트와 별개의 공간
- 스토어 안에 필요한 상태를 담음
- 컴포넌트에서 상태 정보가 필요할때 스토어에 접근

• reducer
- 액션을 바로 스토어에 전달하지 않고 액션을 리듀서에 전달
- 리듀서가 주문을 보고 스토어의 상태 업데이트

• dispatch
- 액션을 리듀서에 전달하기 위해 사용

• Action
- 웹에서 스토어에 운반할 데이터
- 자바스크립트 객체 형식

• Provider
- react-redux 라이브러리에 내장되어 있는 스토어를 손쉽게 연동할 수 있도록 도와주는 컴포넌트

• Connect
- 컨테이너 컴포넌트를 만드는 또 다른 방법

• Selector
- state에서 필요한 데이터를 가져오거나, 계산하여 가져오는 역할
- 데이터에 대한 게산을 해줘서 redux가 적은 양의 필요한 데이터만을 가지고 있게 도와줌
- state를 가져오는 컴포넌트들과 state의 구조 사이 한 층을 두어 구조가 바뀌어도 연관된 모든 컴포넌트를 바꿀 필요 없이, selector 층만 바꿔주면 됨
- reselect를 이용할 경우 memoization 적용하여 불필요한 재계산을 방지

• Immutable Data

• Thunk
- 비동기 작업을 처리할 때 가장 많이 사용하는 미들웨어
- 액션 객체가 아닌 함수를 디스패치 가능

2. useSelector
• Redux 스토어 관련 Hook 중 하나
- 스토어의 상태값을 반환해주는 역할
- 리덕스 스토어의 상태값이 바뀐경우 바뀐 스토어의 상태값을 다시 가져와 컴포넌트를 렌더링

3. Redux DevTools
• 현재 스토어의 상태를 개발자 도구에서 조회 가능
- 지금까지 어떤 액션들이 디스패치 되었는지, 액션에 따라 상태가 변화됐는지 확인 다능
- 액션을 직접 디스패치 가능

• 개발자 도구 사용
- 크롬 웹 스토어에서 확장 프로그램 설치
- yarn add redux-devtools-extension
- index.js 수정
...
import { composeWithDevTools } from 'redux-devtools-extension'

const store = createStore(rootReducer, composeWithDevTools());

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
...

4. Recoil
• facebook에서 발표한 react 전용 라이브러리
- react 문법에 친화적: 전역 상태 값도 react의 state처럼 간단한 get/set 인터페이스로 사용할 수 있는 boilerplate-free API를 제공함
- react와 개발 방향성 같음: 동시성 모드를 비롯한 다른 새로운 react의 기능들과의 호환 가능성도 가짐
- 추가 라이브러리 없이 recoil로만 비동기 처리 가능

• Atom
- 컴포넌트끼리 공유 가능한 가장 작은 단위
- Atom이 업데이트되면 해당 atom을 구독하고 있던 모든 컴포넌트들이 새로운 값으로 리렌더링
- 여러 컴포넌트에서 구독하고 있으면 그 컴포넌트들이 상태를 동일하게 공유

• Selector
- Atom 또는 다른 selector로 구성한 순수함수
- 구독중인 atom 또는 selector가 업데이트되면 selector도 업데이트