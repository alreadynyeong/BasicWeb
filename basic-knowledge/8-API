1. API
• 응용 프로그램 프로그래밍 인터페이스
- 일종의 소프트웨어 인터페이스로 다른 종류의 소프트웨어에 서비스를 제공
- 여러 프로그램들과 데이터베이스, 기능들의 상호 통신 방법을 규정하고 도와주는 매개체

• 장점
- 데이터 접속의 표준화와 편의성
- 자동화와 확장성
- 적용력

• 단점
- 보안성과 HTTP 방식의 제한

2. 서버
• 클라이언트에게 여러가지 서비스를 제공

3. 클라이언트
• 서비스를 사용하는 컴퓨터

4. Web Server
• 웹 서버에 각종 정보를 담은 웹 페이지를 저장한 후 이러한 서버의 웹 페이지를 요청하는 클라이언트에게 제공

5. Background Language

6. DBMS
• DBMS란?
- Database Management system의 준말
- 데이터를 한 곳에 모은 저장소를 만들고 그 저장소에 여러 사용자가 접근하여 데이터를 저장 및 관리 등의 기능을 수행하며 공유할 수 있는 환경을 제공하는 응용 소프트웨어 프로그램
- 공유 저장소(서버)를 구축하고 사용자들에게 접근정보를 공유하여 데이터를 처리할 수 있는 인터페이스를 제공하고 복구 기능과 보안성 기능 또한 제공

• 장점
- 데이터 중복 최소화
- 데이터 공유(일관성 유지)
- 사용자 중심의 데이터 처리
- 데이터 표준화 적용 가능
- 데이터 접근 용이
- 데이터 저장 공간 공유로 인한 절약

• 단점
- 데이터베이스 전문가 필요
- DBMS 구축 서버 필요 및 유지비
- 데이터 백업과 복구 어려움
- 시스템의 복잡성
- 대용량 디스크로 엑세스 집중 시 병목현상으로 과부화 발생
- 대용량 데이터 처리 어려움

7. HTTP
- 클라이언트가 서버로 요청을 했을 때, 보내는 데이터를 HTTP 패킷이라 표현

• GET
- 리소스 조회
- 서버에 전달하고 싶은 데이터를 쿼리에 담아 보냄
- 브라우저 히스토리에 남음
- 길이 제한 있음
- 보안상 중요한 정보를 다루면 안됨
- 캐시가 가능

• POST
- 요청 데이터 처리, 주로 등록에 사용
- 메시지 바디를 통해 서버로 요청 데이터 전달하
- 히스토리에 남지 않음
- 데이터 길이 제한 없음
- 캐시 불가능

• PUT
- 리소스를 대체, 해당 리소스가 없으면 생성
- 클라이언트가 리소스의 위치를 알고 URI를 명시해야 함

• PATCH
- 리소스 부분 변경

• DELETE
- 리소스 삭제

8. Packet
- 데이터를 일정 크기로 자른 것으로 데이터 전송 단위를 의미

• header
- key:value 형태로, 추가 정보를 담고 있음

• body
- 해당 request 혹은 response의 실제 메시지 내용이 남겨 있음

9. Query String
- 사용자가 입력 데이터를 전달하는 방법 중 하나
- URL 주소에 미리 합의된 데이터를 파라미터를 통해 넘기는 것
- path?key=value
- 파라미터가 여러개인 경우 &를 붙여 여러개의 파라미터 값을 넘길 수 있다
- 정렬이나 필터링 할 때 사용

10. Path Variable
- path/value
- 어떤 resource를 식별하고 싶을 때 사용

https://inpa.tistory.com/entry/AXIOS-%F0%9F%93%9A-%EC%84%A4%EC%B9%98-%EC%82%AC%EC%9A%A9
11. Axios
• 정의
- Promise API를 활용하는 HTTP 비동기 통신 라이브러리
- 서버와 클라이언트의 통신을 쉽게 하기 위함

• 특징
- 운영 환경에 따라 브라우저의 XMLHttpRequest 객체 또는 Node.js의 http api 사용
- Promise(ES6) API 사용
- 요청과 응답 데이터의 변형
- HTTP 요청 취소
- HTTP 요청과 응답을 JSON 형태로 자동 변경

• 구조
axios({
  url: 'https://path', // 통신할 웹문서
  method: 'get', // 통신할 방식
  data: { // 인자로 보낼 데이터
    key: value
  }
});

• 단축 메소드
- axios.get(url[, config])
- axios.post(url[, data[, config]])

12. Fetch
• 정의
- HTTP 파이프라인을 구성하는 요청과 응답 등의 요소를 JS에서 접근하고 조작할 수 있는 인터페이스 제공하고
- Fetch API가 제공하는 전역 fetch() 메서드로 네트워크의 리소스를 쉽게 비동기적으로 가져올 수 있음

• 구조
fetch(url, {
   method: 'post',
   headers: {
     "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"
   },
   body: 'foo=bar&lorem=ipsum'
})
.then(res => {
  console.log(res);
})
.catch(error => console.log(error));

13. CORS
• Cross-Origin Resource Sharing
- 다른 출처의 자원을 공유
- 교차 출처 리소스 공유
- HTTP 헤더를 사용하며, 한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 알려주는 체제

• 필요성
- CORS가 없이 모든 곳에서 데이터를 요청할 수 있게 된다면, 다른 사이트에서 원래 사이트를 흉내낼 수 있음